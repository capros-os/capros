dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.7)dnl
AC_INIT(README)

if test "${enable_shared}" = "yes" ; then
    echo "Shared libraries not supported for cross compiling, ignored"
fi

if test "${srcdir}" = "." ; then
  if test "${with_target_subdir}" != "." ; then
    libgloss_topdir="${srcdir}/${with_multisrctop}../.."
  else
    libgloss_topdir="${srcdir}/${with_multisrctop}.."
  fi
else
  libgloss_topdir="${srcdir}/.."
fi
AC_CONFIG_AUX_DIR($libgloss_topdir)

AC_PROG_INSTALL

AC_CANONICAL_SYSTEM

if test -z "${with_multisubdir}" ; then
  configdirs="doc libnosys"
else
  configdirs="libnosys"
fi

case "${target}" in
  i[[3456]]86-*-elf*|i[[3456]]86-*-coff*)
	configdirs="${configdirs} i386 testsuite";
	;;
  m32r-*-*)
	configdirs="${configdirs} m32r testsuite"
	;;
  m68hc11-*-*|m6811-*-*|m68hc12-*-*|m6812-*-*)
	configdirs="m68hc11 testsuite"
	;;
  m68*-*-*)
	configdirs="${configdirs} m68k testsuite"
	;;
  hppa*-*-pro*)
	configdirs="${configdirs} pa testsuite"
	;;
  i960-*-coff)
	configdirs="${configdirs} i960 testsuite"
	;;
  sparc-*-elf*)
	configdirs="${configdirs} sparc testsuite"
	;;
  sparc64-*-elf*)
	configdirs="${configdirs} sparc testsuite"
	;;
  sparc86x-*-*)
	configdirs="${configdirs} sparc testsuite"
	;;
  sparclite-*-*)
	configdirs="${configdirs} sparc testsuite"
	;;
  sparclet-*-aout*)
	configdirs="${configdirs} sparc sparc/libsys testsuite"
	;;
  *arm-wince-pe)
	configdirs="wince"
	;;
  *arm-*-*)
	configdirs="${configdirs} arm"
	;;
  sh*-*-pe)
	configdirs="wince"
	;;
  mips*-*-pe)
	configdirs="wince"
	;;
  mips*-*-*)
	configdirs="${configdirs} mips testsuite"
	;;
  powerpc-*-*|powerpcle-*-*)
	configdirs="${configdirs} rs6000 testsuite"
	;;
  mn10200-*-*)
	configdirs="${configdirs} mn10200 testsuite"
	;;
  mn10300-*-*)
	configdirs="${configdirs} mn10300 testsuite"
	;;
  d30v-*-*)
	configdirs="${configdirs} d30v testsuite"
	;;
  fr30-*-*)
	configdirs="${configdirs} fr30 testsuite"
	;;
  frv*-*-*)
	configdirs="${configdirs} frv testsuite"
	;;
  mcore-*-*)
	configdirs="${configdirs} mcore testsuite"
	;;
  xstormy16-*-*)
	configdirs="${configdirs} xstormy16 testsuite"
	;;
  strongarm-*-elf | strongarm-*-coff)
	configdirs="${configdirs} arm testsuite";
	;;
  arm*-*-elf | arm*-*-coff)
	configdirs="${configdirs} arm testsuite";
	;;
  xscale-*-elf | xscale-*-coff)
	configdirs="${configdirs} arm testsuite";
	;;

esac

# temporarily strip out testsuite
configdirs=`echo $configdirs | sed 's/testsuite//'`

AC_CONFIG_SUBDIRS($configdirs)

# FIXME: We temporarily define our own version of AC_PROG_CC.  This is
# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We
# are probably using a cross compiler, which will not be able to fully
# link an executable.  This should really be fixed in autoconf
# itself.

AC_DEFUN(LIB_AC_PROG_CC,
[AC_BEFORE([$0], [AC_PROG_CPP])dnl
AC_CHECK_PROG(CC, gcc, gcc)
if test -z "$CC"; then
  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)
  test -z "$CC" && AC_MSG_ERROR([no acceptable cc found in \$PATH])
fi

AC_PROG_CC_GNU

if test $ac_cv_prog_gcc = yes; then
  GCC=yes
dnl Check whether -g works, even if CFLAGS is set, in case the package
dnl plays around with CFLAGS (such as to build both debugging and
dnl normal versions of a library), tasteless as that idea is.
  ac_test_CFLAGS="${CFLAGS+set}"
  ac_save_CFLAGS="$CFLAGS"
  CFLAGS=
  AC_PROG_CC_G
  if test "$ac_test_CFLAGS" = set; then
    CFLAGS="$ac_save_CFLAGS"
  elif test $ac_cv_prog_cc_g = yes; then
    CFLAGS="-g -O2"
  else
    CFLAGS="-O2"
  fi
else
  GCC=
  test "${CFLAGS+set}" = set || CFLAGS="-g"
fi
])

LIB_AC_PROG_CC
AS=${AS-as}
AC_SUBST(AS)
AC_CHECK_PROG(AR, ar, ar, :)
AR=${AR-ar}
AC_SUBST(AR)
LD=${LD-ld}
AC_SUBST(LD)
AC_PROG_RANLIB

host_makefile_frag=${srcdir}/config/default.mh

dnl We have to assign the same value to other variables because autoconf
dnl doesn't provide a mechanism to substitute a replacement keyword with
dnl arbitrary data or pathnames.
dnl
host_makefile_frag_path=$host_makefile_frag
AC_SUBST(host_makefile_frag_path)
AC_SUBST_FILE(host_makefile_frag)

# for now, only add multilibs for specific targets
AC_OUTPUT(Makefile,
. ${libgloss_topdir}/config-ml.in,
srcdir=${srcdir}
target=${target}
with_multisubdir=${with_multisubdir}
ac_configure_args="--enable-multilib ${ac_configure_args}"
CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}
libgloss_topdir=${libgloss_topdir}
)



