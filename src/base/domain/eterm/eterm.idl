package eros.domain;

interface eterm extends eros.key {

  /**
   * Give the domain the necessary keys so it can create a graphics
   * window. Returns the window id so main thread can distinguish
   * events correctly.
   *
   */
  void initialize(eros.key kr_session, out unsigned long window_id);

  /**
   * Retrieve a stream key for eterm.
   */
  eros.key stream_open();

  /**
   * Set the character used for the current location of the cursor 
   */
  void set_cursor(char glyph);

  /**
   * Clear eterm's screen to the currently set background color.
   */
  void clear();

  /**
   * Scroll eterm's display.
   */
  void scroll(long columns, long rows);

  /**
   * Request a new height and width for the window
   */
  void resize(unsigned long new_width, unsigned long new_height);

  /**
   * Set the window title (by default it's "ETerm")
   */
  typedef buffer<char, 100> titlestr;
  void set_title(titlestr title);

  /**
   * Set the foreground color.
   */
  void set_fg_color(unsigned long color);

  /**
   * Set the background color.
   */
  void set_bg_color(unsigned long color);

  /**
   * Set the font.
   */
  void set_font(unsigned long fontIndex);

  /**
   * typedef array<unsigned long, 10> fontList;
   * fontList get_fonts();
   */

  void get_fonts();

  /**
   * Ask ETERM to close itself.  This is handy if a domain doesn't
   * have direct access to the session and window id of the particular
   * instance of ETERM.
   */
  void sepuku();

  /**
   * Highlight specified region of the eterm display.
   */
  void highlight(boolean toggle, long start_col, long start_row, 
		 long end_col, long end_row);

  /**
   * Toggle blinking of cursor.  Hey, some people don't like blinking
   * cursors!
   */
  void set_cursor_blink(boolean toggle);

  /**
   * Put capabilities into pastebuffer.
   */
  void put_pastebuffer(eros.key content, eros.key converter);

  /**
   * Get capabilities from pastebuffer.
   */
  void get_pastebuffer(out eros.key content, out eros.key converter);
};

