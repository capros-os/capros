#ifndef __NET_MAP_
#define __NET_MAP_
/*
 * Copyright (C) 2008, Strawberry Development Group.
 *
 * This file is part of the CapROS Operating System runtime library.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, 59 Temple Place - Suite 330 Boston, MA 02111-1307, USA.
 */
/* This material is based upon work supported by the US Defense Advanced
Research Projects Agency under Contract No. W31P4Q-07-C-0070.
Approved for public release, distribution unlimited. */

#include <eros/arch/arm/mach-ep93xx/ep9315.h>
#include <linuxk/lsync.h>
#include <eros/machine/target-asm.h>
#include <drivers/driver.map>

/*********************************************
 * ARM EP93xx Ethernet driver.
 *********************************************/

eth_prog = program segtree LIBDIR "drivers/network/ep93xx_eth";
eth_pc = symbol LIBDIR "drivers/network/ep93xx_eth" _start;

BOOT_DOMCRE(eth);	// maybe each should have his own??

/* Define target-specific resources. */

#define AHB_PA 0x80000000
#define APB_PA 0x80800000
#if 0
#include <devclock.map>
/* The "4" below is offsetof(PwrCnt, struct SYSCONRegisters). */
DEVCLOCK(usbhost, 0, APB_PA + (SYSCON_APB_OFS + 4), SYSCONPwrCnt_USH_EN);
#endif

eth_le_clocks = new node;
eth_le_clocks[0] = number("usb_host");
//eth_le_clocks[1] = usbhost_devclock;

#define physreg (AHB_PA + EMAC_AHB_OFS)

DRIVER(armeth, eth_prog, eth_pc, 0);
armeth_proc key reg KR_CREATOR = eth_proccre;
armethle_iomem = new node;
armethle_iomem[0] = number(16 /* pages */, physreg, 0);
#define pg(i) armethle_iomem[1+(i)] = physpage(physreg+(i)*EROS_PAGE_SIZE);
pg(0)
pg(1)
pg(2)
pg(3)
pg(4)
pg(5)
pg(6)
pg(7)
pg(8)
pg(9)
pg(10)
pg(11)
pg(12)
pg(13)
pg(14)
pg(15)
armethle[LE_CLOCKS] = eth_le_clocks as ro node key;
armethle[LE_IOMEM] = armethle_iomem;

ethKey = armeth;

#endif
