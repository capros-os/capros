package capros;

/* Explain This object . */
interface SWCA extends key 
{
  exception noInverter;	// the specified inverter does not exist
  exception already;

  /* The following are sampled periodically,
  and any changes are logged in Logfile objects. */

  struct LogRecord16 {
    Logfile.recordHeader header;
    short value;
    short padding;
    unsigned long trailer;
  };

  // LED masks: (are these correct?)
  const unsigned byte LEDOverCurrent = 1;
  const unsigned byte LEDFloat       = 2;
  const unsigned byte LEDAC2In       = 4;	// verified correct
  const unsigned byte LEDInverting   = 8;	// verified correct
  const unsigned byte LEDError       = 16;
  const unsigned byte LEDBulk        = 128;	// verified correct
  //const unsigned byte LEDAC1In       = 64;
  //const unsigned byte LEDLineTie     = ?;

  struct LEDLogRecord {
    Logfile.recordHeader header;
    unsigned byte LEDsSteady;
    unsigned byte LEDsBlink;
    short padding;
    unsigned long trailer;
  };

  /** Get a read-only capability to the Logfile containing LogRecord16 records
  in which the value field is the inverter/charger amps
  for the specified inverter.  inverterNum is zero-based. */
  Logfile getInvChgAmpsLogfile(unsigned byte inverterNum);

  /** Get a read-only capability to the Logfile containing LogRecord16 records
  in which the value field is the load amps
  for the specified inverter.  inverterNum is zero-based. */
  Logfile getLoadAmpsLogfile(unsigned byte inverterNum);

  /** Get a read-only capability to the Logfile containing LEDLogRecord records
  for the specified inverter.  inverterNum is zero-based. */
  Logfile getLEDsLogfile(unsigned byte inverterNum);

  // The following are executed on request.
  // All raise already if a request is already in progress.
  // All "set" operations raise key.RequestError if the value is
  //   not acceptable.
  // All voltages in v10 are scaled as voltage * 10
  //   and must be a multiple of 0.2 volts.
  // All times in tm are in units of 10 minutes.

  void getBatteryVolts(unsigned byte inverterNum, out short v10);

  unsigned byte enum GenMode {
    Off,
    Auto,
    On,
    Eq	// equalize
  };
  void getGeneratorMode(unsigned byte inverterNum, out GenMode mode);
  void setGeneratorMode(unsigned byte inverterNum, GenMode mode);

  void getLBCOVolts(unsigned byte inverterNum, out short v10);
  void setLBCOVolts(unsigned byte inverterNum, short v10);

  void getBulkVolts(unsigned byte inverterNum, out short v10);
  void setBulkVolts(unsigned byte inverterNum, short v10);

  void getAbsorptionTime(unsigned byte inverterNum, out short tm);
  void setAbsorptionTime(unsigned byte inverterNum, short tm);

  void getFloatVolts(unsigned byte inverterNum, out short v10);
  void setFloatVolts(unsigned byte inverterNum, short v10);

  void getEqualizeVolts(unsigned byte inverterNum, out short v10);
  void setEqualizeVolts(unsigned byte inverterNum, short v10);

  void getEqualizeTime(unsigned byte inverterNum, out short tm);
  void setEqualizeTime(unsigned byte inverterNum, short tm);

  void getMaxChargeAmps(unsigned byte inverterNum, out short amps);
  void setMaxChargeAmps(unsigned byte inverterNum, short amps);

  void getGenAmps(unsigned byte inverterNum, out short amps);
  void setGenAmps(unsigned byte inverterNum, short amps);

  void get24HourStartVolts(unsigned byte inverterNum, out short v10);
  void set24HourStartVolts(unsigned byte inverterNum, short v10);

  void get2HourStartVolts(unsigned byte inverterNum, out short v10);
  void set2HourStartVolts(unsigned byte inverterNum, short v10);

  void get15MinStartVolts(unsigned byte inverterNum, out short v10);
  void set15MinStartVolts(unsigned byte inverterNum, short v10);
};

// Interface for internal use only:
interface SWCANotify extends key
{
  void notify();
};
