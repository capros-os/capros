#ifndef __PCI_PROBE_CMDS__
#define __PCI_PROBE_CMDS__

/* The structure that is returned to client */
struct pci_dev_data {
  uint8_t busnumber;              /* pci bus number */  
  unsigned int    devfn;          /* encoded device & function index */
  unsigned short  vendor;
  unsigned short  device;
  unsigned short  subsystem_vendor;
  unsigned short  subsystem_device;
  unsigned int    class;          /* 3 bytes: (base,sub,prog-if) */
  unsigned int    hdr_type;       /* PCI header type */
  unsigned int     master : 1;    /* set if device is master capable */
  uint8_t    irq;                 /* irq generated by this device */
  
  unsigned long   base_address[6];
  unsigned long   rom_address;
  
};
 
/* Client Commands and  Arguments */
#define OC_Pci_Initialize       10
 
#define OC_Pci_Scan_Bus     11


#define OC_Pci_Find_VendorID  12
//Send w1 = VendorID 
//Send w3 = Index Starts with 0 and goes upto Total -1]
//Rcv data = Device Structre

#define OC_Pci_Find_VendorID_Total  13
//Send w1 = VendorID 
//Rcv  w1 = Total Count 


#define OC_Pci_Find_VenDevID  14
//Send w1 = VendorID
//Send w2 = DeviceID 
//Send w3 = Index [Starts with 0 and goes upto Total -1]
//Rcv data = Device Structre

#define OC_Pci_Find_VenDevID_Total  15
//Send w1 = VendorDeviceID 
//Rcv  w1 = Total Count 


#define OC_Pci_Find_ClassID  16
//Send w1 = ClassID 
//Send w3 = Index [Starts with 0 and goes upto Total -1]
//Rcv data = Device Structre


#define OC_Pci_Find_ClassID_Total  17
//Send w1 = ClassID 
//Rcv  w1 = Total Count 

#define OC_Pci_Find_Base_ClassID  18
//Send w1 = BaseClassID 
//Send w3 = Index [Starts with 0 and goes upto Total -1]
//Rcv data = Device Structre


#define OC_Pci_Find_Base_ClassID_Total  19
//Send w1 = BaseClassID 
//Rcv  w1 = Total Count 

//#define OC_Pci_Find_DeviceID_Device  16
//#define OC_Pci_Find_DeviceID_  17 

#define OC_Pci_write_config_dword      20
//Send w1 = Where to write
//Rcv  w1 = Value
//Data    = Dev structure

#define OC_Pci_read_config_dword      21
//Send w1 = Where to read from
//Rcv  w1 = Value is returned here
//Data    = Dev structure

#define OC_Pci_write_config_word      22
//Send w1 = Where to write
//Rcv  w1 = Value
//Data = Dev Structure

#define OC_Pci_read_config_word      23
//Send w1 = Where to read from
//Rcv w1 = Value is returned from here
//Data = Dev structure

#define OC_Pci_write_config_byte      24
//Send w1 = Where to write
//Rcv  w1 = Value
//Data = Dev Structure

#define OC_Pci_read_config_byte      25
//Send w1 = Where to read from
//Rcv w1 = Value is returned from here
//Data = Dev structure



/* Return Codes */
#define RC_Pci_Not_Found       100
#define RC_Pci_Found           101
#define RC_Pci_NotInitialized  102
#define RC_No_Such_Pci_Device   103

/* Stubs for invocations */
uint32_t pciprobe_initialize(uint32_t probe_key);

uint32_t pciprobe_vendor_total(uint32_t probe_key, uint32_t vendor,
			       /* out */ uint32_t *total);

uint32_t pciprobe_vendor_next(uint32_t probe_key, uint32_t vendor,
			      uint32_t index,
		    /* out */ struct pci_dev_data *probe_result);

uint32_t pciprobe_vendor_device_total(uint32_t probe_key, uint32_t vendor,
				      uint32_t device,
				      /* out */ uint32_t *total);

uint32_t pciprobe_vendor_device_next(uint32_t probe_key, uint32_t vendor,
				     uint32_t device, uint32_t index,
			   /* out */ struct pci_dev_data *probe_result);

uint32_t pciprobe_class_total(uint32_t probe_key, uint32_t class,
			       /* out */ uint32_t *total);

uint32_t pciprobe_class_next(uint32_t probe_key, uint32_t class,
			      uint32_t index,
		    /* out */ struct pci_dev_data *probe_result);

uint32_t pciprobe_base_class_total(uint32_t probe_key, uint32_t class,
				   /* out */ uint32_t *total);

uint32_t pciprobe_base_class_next(uint32_t probe_key, uint32_t class,
				  uint32_t index,
				  /* out */ struct pci_dev_data *probe_result);

uint32_t pciprobe_write_config_dword(uint32_t probe_key,
				     struct pci_dev_data *dev,
 				     uint32_t off,uint32_t value);

uint32_t pciprobe_write_config_word(uint32_t probe_key,
				     struct pci_dev_data *dev,
 				     uint32_t off,uint16_t value);

uint32_t pciprobe_read_config_byte(uint32_t probe_key,
				   struct pci_dev_data *dev,
				   uint32_t off,uint8_t *value);


uint32_t pciprobe_read_config_dword(uint32_t probe_key,
				     struct pci_dev_data *dev,
 				     uint32_t off,uint32_t *value);

uint32_t pciprobe_read_config_word(uint32_t probe_key,
				     struct pci_dev_data *dev,
 				     uint32_t off,uint16_t *value);

uint32_t pciprobe_read_config_byte(uint32_t probe_key,
				     struct pci_dev_data *dev,
 				     uint32_t off,uint8_t *value);

#endif
