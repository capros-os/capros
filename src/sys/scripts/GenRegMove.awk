#
# Copyright (C) 1998, 1999, Jonathan S. Shapiro.
#
# This file is part of the EROS Operating System.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

BEGIN {
  nmask = 0;
  nunit = 0;
  nfx = 0;
  nfpu = 0;
  last = 14;
}

/^keysize/ {
  keysize = $2;
}

/^fix/ {
  prefix[$4] = "trapFrame.";
  svtype[$4] = $3;
  class[$4] = "fix";
}

/^pfix/ {
  prefix[$4] = "pseudoRegs.";
  svtype[$4] = $3;
  class[$4] = "fix";
}

/^tfix/ {
  prefix[$4] = "traceRegs.";
  svtype[$4] = $3;
  class[$4] = "fix";
}

/^gen/ {
  prefix[$4] = "";
  svtype[$4] = $3;
  class[$4] = "gen";
}

/^fpu/ {
  prefix[$4] = "fpuRegs.";
  svtype[$4] = $3;
  class[$4] = "fpu";
}

/^load/ {
  if ($4 == "root") {
    load = sprintf("  thisPtr->%s%s = *((%s *) (ROOTSLOT(%d) + %d + offsetof(KeyBits,u.nk))); \\\n", prefix[$2], $2, svtype[$2], $5, $6);
    unload = sprintf("  *((%s *)(ROOTSLOT(%d) + %d + offsetof(KeyBits,u.nk))) = thisPtr->%s%s; \\\n", svtype[$2], $5, $6, prefix[$2], $2);
  }
  else {
    load = sprintf("  thisPtr->%s%s = *((%s *) (ANXSLOT(%d, %d) + %d + offsetof(KeyBits,u.nk))); \\\n", prefix[$2], $2, svtype[$2], $4, $5, $6);
    unload = sprintf("  *((%s *)(ANXSLOT(%d, %d) + %d + offsetof(KeyBits,u.nk))) = thisPtr->%s%s; \\\n", svtype[$2], $4, $5, $6, prefix[$2], $2);
  }

  if (class[$2] == "fpu") {
    load_fpu[nfpu] = load;
    unload_fpu[nfpu] = unload;
    nfpu++;
  }
  else {
    load_fix[nfx] = load;
    unload_fix[nfx] = unload;
    nfx++;
  }
}

END	{
  printf("#ifndef __GEN_REGMOVE_H__\n");	
  printf("#define __GEN_REGMOVE_H__\n\n");	

  printf("/* This file is automatically generated and is hereby\n");
  printf("   placed in the public domain */\n\n");
  printf("#define ROOTSLOT(x) (rootkey0 + %d*(x))\n", keysize);
  printf("#define ANXSLOT(anx,x) (annex##anx + %d*(x))\n", keysize);
  printf("#define LOAD_FIX_REGS \\\n");
  for (i = 0; i < nfx; i++)
    printf(load_fix[i]);
  printf("\n");

  printf("#define UNLOAD_FIX_REGS \\\n");
  for (i = 0; i < nfx; i++)
    printf(unload_fix[i]);
  printf("\n");

  printf("#define LOAD_FLOAT_REGS \\\n");
  for (i = 0; i < nfx; i++)
    printf(load_fpu[i]);
  printf("\n");

  printf("#define UNLOAD_FLOAT_REGS \\\n");
  for (i = 0; i < nfx; i++)
    printf(unload_fpu[i]);
  printf("\n");

  printf("#endif /* __GEN_REGMOVE_H__ */\n");	
}

