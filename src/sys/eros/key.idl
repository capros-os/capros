package capros;

/*
 * The key interface defines a set of operations that are common to
 * all CapROS capabilities. While some objects do not implement some of
 * these operations (e.g. many kernel keys do not honor the destroy
 * operation), these operations are nonetheless so universal that
 * they warrant inclusion in the common ancestor of all interfaces.
 */
abstract interface key raises(Void, UnknownRequest, RequestError, 
			      NoAccess, NoMoreNodes, NoMorePages, 
			      NotPersistent) {
  exception Void;
  exception UnknownRequest;
  exception RequestError;
  exception NoAccess;

  // Following are not generated by the kernel, but are so ubiquitous
  // that I have defined them here pending resolution about whether
  // exception names must conceptually be globally unique.

  exception BadBank;
  exception NoMoreNodes;
  exception NoMorePages;
  exception NotPersistent;

  const unsigned long msgLimit = 65536;

  typedef unsigned long type;
  typedef unsigned long exceptionType;

  /** Destroy the object.
   *
   * The destroy operation requests that the target object destroy
   * itself. This operation is not implemented by most kernel
   * capabilities, but is declared as part of the basic "key"
   * interface because we want the same invocation to
   * work for all objects that actually <em>do</em> implement this 
   * operation.
   */
  void destroy();

  /** Get alleged type code.
   *
   * Returns an unsigned integer indicating the alleged type code of
   * the invoked interface. 
   */
  type getType();
  
  // string signature();
};
