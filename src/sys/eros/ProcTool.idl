package capros;

/** Interface for process key creation/manipulation.
 */
interface ProcTool extends key {
  /* FIX: Some of the key types here are wrong because Node/Process
     haven't been converted yet. */

  /** Make a process key from a node key */
  capros.key makeProcess(capros.key krNode);

  /* If procKey is a process key and brand is its brand,
  this operation returns a node key to the root of procKey.
  Otherwise it raises key.NoAccess. */
  capros.key identifyProcess(capros.key procKey, capros.key brand);

  /** Identify a gate key with brand.

  If gateKey is a start or resume key whose brand is the specified brand,
  then this operation returns:
    in nodeKey, a node key to the root node of the process
      designated by gateKey;
    in keyType, 1 if gateKey is a start key and 2 if it is a resume key;
    in keyInfo, 0 if gateKey is a resume key
                and the keyData if it is a start key.
  */
  void canOpener(capros.key gateKey, capros.key brand, out capros.key nodeKey,
		 out unsigned long keyType, out unsigned long keyInfo);

  /* If GPTKey is a key to a GPT without the noCall restriction,
  that has a keeper that is a start or resume key to a process
  whose brand matches the specified brand, then the operation returns:
  in GPTOut, a non-opaque key to the GPT;
  in keyType, 0 if the keeper is a start key or 1 if a resume key; and
  in keyInfo, the keyInfo if the keeper is a start key or 0 if a resume key.
  Otherwise it raises RequestError. */ 
  void identGPTKeeper(capros.key GPTKey, capros.key brand, 
			  out capros.key GPTOut, 
			  out unsigned long keyType,
			  out unsigned long keyInfo);

  void identForwarderTarget(capros.key forwarder, capros.key brand, 
			  out capros.key nonOpaqueForwarder, 
			  out unsigned long keyType, // 1 start, 2 resume
			  out unsigned long keyInfo);
};
