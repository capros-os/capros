package capros;

/** Interface to allow processes to sleep voluntarily.
 */
interface Sleep extends key raises(key.Restart) {

  typedef unsigned <64> nanoseconds_t;
  /* The following does not work due to a bug in capidl:
  const unsigned <64> infiniteTime = 18446744073709000000; // about UINT64_MAX
  */
  /* (Note: 2**64 nanoseconds is about 584 years.) */

  /* Returns the time in nanoseconds since some time in the past. 
  The value returned is monotonic while the system remains up,
  but is unrelated to values returned prior to the last restart. */
  unsigned long long
  // Due to a bug in capidl, it does not work to use nanoseconds_t here.
  getTimeMonotonic();

  /* Returns the time in nanoseconds since some time in the past. 
  The value returned is monotonic over checkpoint/restart.
  This operation waits if necessary until the restart procedure has completed,
  therefore it should be used only by persistent processes. */
  unsigned long long
  // Due to a bug in capidl, it does not work to use nanoseconds_t here.
  getPersistentMonotonicTime();

  /** Sleep until the specified number of milliseconds has passed.
  If a system restart occurs (and the caller is persistent),
  the operation raises key.Restart at that time.
  */
  void sleep(unsigned long long ms);

  /** Sleep until the specified number of nanoseconds has passed.
  If a system restart occurs (and the caller is persistent),
  the operation raises key.Restart at that time.
  */
  // Due to a bug in capidl, it does not work to use nanoseconds_t here.
  void sleepForNanoseconds(unsigned long long /* nanoseconds_t */ ns);

  /** Sleep until getTimeMonotonic() >= ns.
  If a system restart occurs (and the caller is persistent),
  the operation raises key.Restart at that time.
  */
  // Due to a bug in capidl, it does not work to use nanoseconds_t here.
  void sleepTill(unsigned long long /* nanoseconds_t */ ns);

  /** Sleep until getPersistentMonotonicTime() >= ns.
  This operation waits if necessary until the restart procedure has completed,
  therefore it should be used only by persistent processes. */
  client void sleepTillPersistent(unsigned long long /* nanoseconds_t */ ns);

  /** Sleep until either getPersistentMonotonicTime() >= ns
        or a restart occurs, whichever happens first.
  If a system restart occurs, the operation raises key.Restart at that time.
  This operation waits if necessary until the restart procedure has completed,
  therefore it should be used only by persistent processes. */
  void sleepTillPersistentOrRestart(unsigned long long /* nanoseconds_t */ ns);


  const unsigned long DelayMaxMicroseconds = 5000000;
	// Delaying more than 5 seconds is a waste of the processor.

  /** Delay in a spin loop for the specified number of microseconds,
      which must be less than DelayMaxMicroseconds.

      This method is not an invocation and it can be executed with
      interrupts disabled. */
  client void delayMicroseconds(unsigned long microseconds,
                         unsigned long calibrationConstant);

  /** Get the calibration constant to be passed to delayMicroseconds. */
  unsigned long getDelayCalibration();
};
