state start "Start";
state yielded "Yielded";
state committed "Committed";
state error "Error";
state good "Good";

ast yield { function_call { identifier "thr_Yield" } { ellipsis } };
ast commit { function_call { identifier "inv_Commit" } { ellipsis } };
ast handlerdone { function_call { identifier inv_HandlerDone } {
ellipsis } };
ast cleanup { function_call { identifier "inv_Cleanup" } { ellipsis }
};
ast other { other };

// After yield, better not call commit:
transition start yielded yield;
// After commit, better call inv_HandlerDone(), better not yield.
transition start committed commit;
// If not committed, better NOT call HandlerDone:
transition start error handlerdone;
// Start until proven otherwise
transition start start other;

// If we consider yield a trap state, then no need for further transitions.
// t yielded error { function_call { identifier "inv_Commit" } { ellipsis } }
// t yielded yielded { other }
transition committed good handlerdone;
transition committed error cleanup;
transition committed committed other;

transition yielded yielded other;

transition error error other;

transition good good other;
